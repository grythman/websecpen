name: Security Vulnerability Scan
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
          
      - name: Build application
        run: |
          cd frontend
          npm run build
          
      # Snyk Security Scan (optional - set SNYK_TOKEN secret to enable)
      - name: Run Snyk to check for vulnerabilities
        if: ${{ vars.ENABLE_SNYK_SCAN == 'true' }}
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=frontend/package.json --severity-threshold=high
        continue-on-error: true
      
      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: snyk.sarif
        continue-on-error: true
          
      - name: Start test server
        run: |
          cd frontend
          npm run preview &
          sleep 10
        
      - name: Run SecureScan Vulnerability Scan
        env:
          SECURESCAN_API_KEY: ${{ secrets.SECURESCAN_API_KEY }}
          SECURESCAN_BASE_URL: ${{ secrets.SECURESCAN_BASE_URL }}
          TARGET_URL: ${{ secrets.TARGET_URL || 'http://localhost:4173' }}
        run: |
          # Start vulnerability scan via API
          SCAN_RESPONSE=$(curl -s -X POST "${SECURESCAN_BASE_URL}/api/scan/start" \
            -H "X-API-Key: ${SECURESCAN_API_KEY}" \
            -H "Content-Type: application/json" \
            -d "{
              \"url\": \"${TARGET_URL}\",
              \"scan_type\": \"active\",
              \"ci_cd\": true,
              \"github_context\": {
                \"repository\": \"${{ github.repository }}\",
                \"ref\": \"${{ github.ref }}\",
                \"sha\": \"${{ github.sha }}\",
                \"run_id\": \"${{ github.run_id }}\"
              }
            }")
          
          SCAN_ID=$(echo "$SCAN_RESPONSE" | jq -r '.scan_id')
          echo "Started scan with ID: $SCAN_ID"
          
          # Wait for scan completion
          while true; do
            STATUS_RESPONSE=$(curl -s -X GET "${SECURESCAN_BASE_URL}/api/scan/status/${SCAN_ID}" \
              -H "X-API-Key: ${SECURESCAN_API_KEY}")
            
            STATUS=$(echo "$STATUS_RESPONSE" | jq -r '.status')
            echo "Scan status: $STATUS"
            
            if [ "$STATUS" = "completed" ]; then
              break
            elif [ "$STATUS" = "failed" ]; then
              echo "Scan failed"
              exit 1
            fi
            
            sleep 30
          done
          
          # Get scan results
          RESULTS_RESPONSE=$(curl -s -X GET "${SECURESCAN_BASE_URL}/api/scan/result/${SCAN_ID}" \
            -H "X-API-Key: ${SECURESCAN_API_KEY}")
          
          echo "$RESULTS_RESPONSE" > scan-results.json
          
          # Check for critical vulnerabilities
          CRITICAL_COUNT=$(echo "$RESULTS_RESPONSE" | jq '[.results[] | select(.severity == "High" or .severity == "Critical")] | length')
          
          echo "Found $CRITICAL_COUNT critical/high severity vulnerabilities"
          
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "::error::Critical vulnerabilities found! Check scan results for details."
            echo "::set-output name=has_critical::true"
          else
            echo "::set-output name=has_critical::false"
          fi
          
      - name: Upload scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: scan-results.json
          
      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('scan-results.json', 'utf8'));
            
            const criticalVulns = results.results.filter(v => 
              v.severity === 'High' || v.severity === 'Critical'
            );
            
            let comment = '## 🔒 Security Scan Results\n\n';
            comment += `**Total vulnerabilities found:** ${results.results.length}\n`;
            comment += `**Critical/High severity:** ${criticalVulns.length}\n\n`;
            
            if (criticalVulns.length > 0) {
              comment += '### ⚠️ Critical Issues\n\n';
              criticalVulns.forEach(vuln => {
                comment += `- **${vuln.type}** (${vuln.severity}): ${vuln.description}\n`;
              });
              comment += '\n';
            }
            
            comment += `[View full report](${process.env.SECURESCAN_BASE_URL}/scan/${results.scan_id})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
      - name: Fail on critical vulnerabilities
        env:
          FAIL_ON_CRITICAL: ${{ secrets.FAIL_ON_CRITICAL || 'true' }}
        run: |
          if [ "$FAIL_ON_CRITICAL" = "true" ] && [ "${{ steps.security-scan.outputs.has_critical }}" = "true" ]; then
            echo "Failing due to critical vulnerabilities found"
            exit 1
          fi
