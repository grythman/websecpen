import React, { useState, useEffect } from 'react';
import io from 'socket.io-client';
import './VulnerabilityTagManager.css';

const VulnerabilityTagManager = ({ scanId, vulnId, onTagsUpdate }) => {
  const [tags, setTags] = useState([]);
  const [newTag, setNewTag] = useState('');
  const [tagColor, setTagColor] = useState('#007bff');
  const [tagDescription, setTagDescription] = useState('');
  const [loading, setLoading] = useState(false);
  const [showAddForm, setShowAddForm] = useState(false);
  const [socket, setSocket] = useState(null);

  // Predefined tag colors
  const predefinedColors = [
    '#dc3545', '#28a745', '#007bff', '#ffc107', '#fd7e14',
    '#6f42c1', '#20c997', '#e83e8c', '#17a2b8', '#6c757d'
  ];

  // Common tag suggestions
  const tagSuggestions = [
    'critical', 'high-priority', 'false-positive', 'needs-review',
    'in-progress', 'scheduled', 'verified', 'duplicate', 'wontfix'
  ];

  useEffect(() => {
    // Initialize socket connection
    const socketConnection = io(process.env.REACT_APP_API_URL || 'http://localhost:5000');
    setSocket(socketConnection);

    // Listen for real-time tag updates
    socketConnection.on('vulnerability_tag_added', (data) => {
      if (data.scan_id === scanId && data.vuln_id === vulnId) {
        fetchTags();
      }
    });

    // Initial fetch
    fetchTags();

    return () => {
      socketConnection.disconnect();
    };
  }, [scanId, vulnId]);

  const fetchTags = async () => {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(
        `/api/scan/${scanId}/vulnerabilities/${vulnId}/tags`,
        {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        }
      );

      if (response.ok) {
        const data = await response.json();
        setTags(data);
        if (onTagsUpdate) {
          onTagsUpdate(data);
        }
      }
    } catch (error) {
      console.error('Error fetching tags:', error);
    }
  };

  const addTag = async () => {
    if (!newTag.trim()) return;

    setLoading(true);
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(
        `/api/scan/${scanId}/vulnerabilities/${vulnId}/tags`,
        {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            tag: newTag.trim(),
            color: tagColor,
            description: tagDescription.trim()
          })
        }
      );

      if (response.ok) {
        setNewTag('');
        setTagDescription('');
        setShowAddForm(false);
        fetchTags();
      } else {
        const errorData = await response.json();
        alert(errorData.error || 'Failed to add tag');
      }
    } catch (error) {
      console.error('Error adding tag:', error);
      alert('Failed to add tag');
    } finally {
      setLoading(false);
    }
  };

  const removeTag = async (tagId) => {
    if (!window.confirm('Are you sure you want to remove this tag?')) return;

    try {
      const token = localStorage.getItem('token');
      const response = await fetch(
        `/api/scan/${scanId}/vulnerabilities/${vulnId}/tags/${tagId}`,
        {
          method: 'DELETE',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        }
      );

      if (response.ok) {
        fetchTags();
      }
    } catch (error) {
      console.error('Error removing tag:', error);
    }
  };

  const exportTaggedVulns = async (tag = '') => {
    try {
      const token = localStorage.getItem('token');
      const url = `/api/scan/${scanId}/tags/export${tag ? `?tag=${encodeURIComponent(tag)}` : ''}`;
      
      const response = await fetch(url, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (response.ok) {
        const blob = await response.blob();
        const downloadUrl = window.URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = downloadUrl;
        link.download = `tagged_vulnerabilities_${tag || 'all'}_${Date.now()}.csv`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        window.URL.revokeObjectURL(downloadUrl);
      }
    } catch (error) {
      console.error('Error exporting tags:', error);
      alert('Failed to export tagged vulnerabilities');
    }
  };

  const handleSuggestionClick = (suggestion) => {
    setNewTag(suggestion);
  };

  const getTagsByUser = () => {
    const groupedTags = {};
    tags.forEach(tag => {
      if (!groupedTags[tag.user_id]) {
        groupedTags[tag.user_id] = [];
      }
      groupedTags[tag.user_id].push(tag);
    });
    return groupedTags;
  };

  return (
    <div className="vulnerability-tag-manager">
      <div className="tag-manager-header">
        <h4>🏷️ Vulnerability Tags</h4>
        <div className="tag-actions">
          <button
            className="btn btn-sm btn-primary"
            onClick={() => setShowAddForm(!showAddForm)}
          >
            ➕ Add Tag
          </button>
          <button
            className="btn btn-sm btn-outline-secondary"
            onClick={() => exportTaggedVulns()}
            title="Export all tagged vulnerabilities"
          >
            📁 Export
          </button>
        </div>
      </div>

      {/* Existing Tags */}
      <div className="existing-tags">
        {tags.length === 0 ? (
          <div className="no-tags">
            <span className="no-tags-icon">🏷️</span>
            <p>No tags yet. Add tags to categorize this vulnerability.</p>
          </div>
        ) : (
          <div className="tags-container">
            {Object.entries(getTagsByUser()).map(([userId, userTags]) => (
              <div key={userId} className="user-tags-group">
                <div className="user-tags-header">
                  <span className="user-icon">👤</span>
                  <span className="user-id">User {userId}</span>
                  <span className="tag-count">({userTags.length} tags)</span>
                </div>
                <div className="user-tags">
                  {userTags.map((tag) => (
                    <div
                      key={tag.id}
                      className="tag-item"
                      style={{
                        borderLeft: `4px solid ${tag.color}`,
                        backgroundColor: `${tag.color}10`
                      }}
                    >
                      <div className="tag-content">
                        <div className="tag-header">
                          <span
                            className="tag-badge"
                            style={{ backgroundColor: tag.color }}
                          >
                            {tag.tag}
                          </span>
                          <div className="tag-actions">
                            <button
                              className="btn-icon export-tag"
                              onClick={() => exportTaggedVulns(tag.tag)}
                              title={`Export vulnerabilities tagged as "${tag.tag}"`}
                            >
                              📁
                            </button>
                            <button
                              className="btn-icon delete-tag"
                              onClick={() => removeTag(tag.id)}
                              title="Remove tag"
                            >
                              ❌
                            </button>
                          </div>
                        </div>
                        {tag.description && (
                          <div className="tag-description">
                            {tag.description}
                          </div>
                        )}
                        <div className="tag-meta">
                          <span className="tag-date">
                            📅 {new Date(tag.created_at).toLocaleDateString()}
                          </span>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Add Tag Form */}
      {showAddForm && (
        <div className="add-tag-form">
          <div className="form-header">
            <h5>🏷️ Add New Tag</h5>
            <button
              className="btn-close"
              onClick={() => setShowAddForm(false)}
            >
              ✕
            </button>
          </div>

          {/* Tag Suggestions */}
          <div className="tag-suggestions">
            <label>Quick Tags:</label>
            <div className="suggestions-grid">
              {tagSuggestions.map((suggestion) => (
                <button
                  key={suggestion}
                  className={`suggestion-tag ${newTag === suggestion ? 'selected' : ''}`}
                  onClick={() => handleSuggestionClick(suggestion)}
                >
                  {suggestion}
                </button>
              ))}
            </div>
          </div>

          {/* Tag Input */}
          <div className="form-group">
            <label htmlFor="tag-name">Tag Name:</label>
            <input
              id="tag-name"
              type="text"
              value={newTag}
              onChange={(e) => setNewTag(e.target.value)}
              placeholder="Enter tag name..."
              className="form-control"
              maxLength="50"
            />
            <small className="form-text">
              {newTag.length}/50 characters
            </small>
          </div>

          {/* Color Selection */}
          <div className="form-group">
            <label>Tag Color:</label>
            <div className="color-picker">
              <div className="predefined-colors">
                {predefinedColors.map((color) => (
                  <button
                    key={color}
                    className={`color-option ${tagColor === color ? 'selected' : ''}`}
                    style={{ backgroundColor: color }}
                    onClick={() => setTagColor(color)}
                    title={color}
                  />
                ))}
              </div>
              <input
                type="color"
                value={tagColor}
                onChange={(e) => setTagColor(e.target.value)}
                className="custom-color-input"
                title="Custom color"
              />
            </div>
          </div>

          {/* Description */}
          <div className="form-group">
            <label htmlFor="tag-description">Description (optional):</label>
            <textarea
              id="tag-description"
              value={tagDescription}
              onChange={(e) => setTagDescription(e.target.value)}
              placeholder="Add a description for this tag..."
              className="form-control"
              rows="2"
              maxLength="200"
            />
            <small className="form-text">
              {tagDescription.length}/200 characters
            </small>
          </div>

          {/* Preview */}
          {newTag && (
            <div className="tag-preview">
              <label>Preview:</label>
              <div
                className="preview-tag"
                style={{
                  backgroundColor: tagColor,
                  color: '#fff',
                  padding: '4px 8px',
                  borderRadius: '4px',
                  display: 'inline-block'
                }}
              >
                {newTag}
              </div>
            </div>
          )}

          {/* Form Actions */}
          <div className="form-actions">
            <button
              className="btn btn-secondary"
              onClick={() => setShowAddForm(false)}
              disabled={loading}
            >
              Cancel
            </button>
            <button
              className="btn btn-primary"
              onClick={addTag}
              disabled={!newTag.trim() || loading}
            >
              {loading ? '⏳ Adding...' : '✅ Add Tag'}
            </button>
          </div>
        </div>
      )}

      {/* Tag Statistics */}
      {tags.length > 0 && (
        <div className="tag-statistics">
          <div className="stats-header">
            <h6>📊 Tag Statistics</h6>
          </div>
          <div className="stats-grid">
            <div className="stat-item">
              <span className="stat-value">{tags.length}</span>
              <span className="stat-label">Total Tags</span>
            </div>
            <div className="stat-item">
              <span className="stat-value">
                {new Set(tags.map(t => t.user_id)).size}
              </span>
              <span className="stat-label">Contributors</span>
            </div>
            <div className="stat-item">
              <span className="stat-value">
                {new Set(tags.map(t => t.tag)).size}
              </span>
              <span className="stat-label">Unique Tags</span>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default VulnerabilityTagManager; 