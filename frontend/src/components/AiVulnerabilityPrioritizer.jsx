import React, { useState, useEffect } from 'react';
import './AiVulnerabilityPrioritizer.css';

const AiVulnerabilityPrioritizer = ({ scanId }) => {
  const [prioritizedVulns, setPrioritizedVulns] = useState([]);
  const [loading, setLoading] = useState(false);
  const [sortBy, setSortBy] = useState('priority_score');
  const [filterLevel, setFilterLevel] = useState('all');
  const [showDetails, setShowDetails] = useState({});

  useEffect(() => {
    if (scanId) {
      fetchPrioritizedVulns();
    }
  }, [scanId]);

  const fetchPrioritizedVulns = async () => {
    setLoading(true);
    try {
      const token = localStorage.getItem('auth_token');
      const response = await fetch(`/api/scan/${scanId}/prioritize`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        const data = await response.json();
        setPrioritizedVulns(data.vulnerabilities || []);
      } else {
        console.error('Failed to fetch prioritized vulnerabilities');
      }
    } catch (error) {
      console.error('Error fetching prioritized vulnerabilities:', error);
    } finally {
      setLoading(false);
    }
  };

  const getPriorityColor = (level) => {
    switch (level.toLowerCase()) {
      case 'critical':
        return '#dc3545';
      case 'high':
        return '#fd7e14';
      case 'medium':
        return '#ffc107';
      case 'low':
        return '#28a745';
      default:
        return '#6c757d';
    }
  };

  const getPriorityIcon = (level) => {
    switch (level.toLowerCase()) {
      case 'critical':
        return 'üö®';
      case 'high':
        return '‚ö†Ô∏è';
      case 'medium':
        return 'üî∂';
      case 'low':
        return 'üü¢';
      default:
        return '‚ö™';
    }
  };

  const formatScore = (score) => {
    return ((score || 0) * 100).toFixed(1);
  };

  const toggleDetails = (vulnId) => {
    setShowDetails(prev => ({
      ...prev,
      [vulnId]: !prev[vulnId]
    }));
  };

  const getSortedAndFilteredVulns = () => {
    let filtered = prioritizedVulns;

    // Apply filter
    if (filterLevel !== 'all') {
      filtered = filtered.filter(vuln => 
        vuln.priority_level.toLowerCase() === filterLevel.toLowerCase()
      );
    }

    // Apply sort
    return filtered.sort((a, b) => {
      switch (sortBy) {
        case 'priority_score':
          return b.priority_score - a.priority_score;
        case 'exploitability':
          return b.exploitability - a.exploitability;
        case 'business_impact':
          return b.business_impact - a.business_impact;
        case 'technical_severity':
          return b.technical_severity - a.technical_severity;
        case 'name':
          return a.name.localeCompare(b.name);
        default:
          return b.priority_score - a.priority_score;
      }
    });
  };

  const getScoreColor = (score) => {
    if (score >= 0.8) return '#dc3545';
    if (score >= 0.6) return '#fd7e14';
    if (score >= 0.4) return '#ffc107';
    return '#28a745';
  };

  if (loading) {
    return (
      <div className="ai-prioritizer loading">
        <div className="loading-spinner">
          <div className="spinner"></div>
          <p>ü§ñ AI is analyzing vulnerabilities...</p>
        </div>
      </div>
    );
  }

  const sortedVulns = getSortedAndFilteredVulns();

  return (
    <div className="ai-vulnerability-prioritizer">
      <div className="prioritizer-header">
        <h3>ü§ñ AI Vulnerability Prioritization</h3>
        <div className="ai-badge">
          <span className="ai-icon">üß†</span>
          <span>AI-Powered</span>
        </div>
      </div>

      <div className="prioritizer-stats">
        <div className="stat-item critical">
          <span className="stat-icon">üö®</span>
          <div className="stat-content">
            <span className="stat-number">
              {prioritizedVulns.filter(v => v.priority_level === 'Critical').length}
            </span>
            <span className="stat-label">Critical</span>
          </div>
        </div>
        <div className="stat-item high">
          <span className="stat-icon">‚ö†Ô∏è</span>
          <div className="stat-content">
            <span className="stat-number">
              {prioritizedVulns.filter(v => v.priority_level === 'High').length}
            </span>
            <span className="stat-label">High</span>
          </div>
        </div>
        <div className="stat-item medium">
          <span className="stat-icon">üî∂</span>
          <div className="stat-content">
            <span className="stat-number">
              {prioritizedVulns.filter(v => v.priority_level === 'Medium').length}
            </span>
            <span className="stat-label">Medium</span>
          </div>
        </div>
        <div className="stat-item low">
          <span className="stat-icon">üü¢</span>
          <div className="stat-content">
            <span className="stat-number">
              {prioritizedVulns.filter(v => v.priority_level === 'Low').length}
            </span>
            <span className="stat-label">Low</span>
          </div>
        </div>
      </div>

      <div className="prioritizer-controls">
        <div className="control-group">
          <label htmlFor="sort-select">Sort by:</label>
          <select 
            id="sort-select"
            value={sortBy} 
            onChange={(e) => setSortBy(e.target.value)}
            className="control-select"
          >
            <option value="priority_score">Priority Score</option>
            <option value="exploitability">Exploitability</option>
            <option value="business_impact">Business Impact</option>
            <option value="technical_severity">Technical Severity</option>
            <option value="name">Name</option>
          </select>
        </div>

        <div className="control-group">
          <label htmlFor="filter-select">Filter by priority:</label>
          <select 
            id="filter-select"
            value={filterLevel} 
            onChange={(e) => setFilterLevel(e.target.value)}
            className="control-select"
          >
            <option value="all">All Levels</option>
            <option value="critical">Critical</option>
            <option value="high">High</option>
            <option value="medium">Medium</option>
            <option value="low">Low</option>
          </select>
        </div>

        <button 
          onClick={fetchPrioritizedVulns}
          className="refresh-btn"
          disabled={loading}
        >
          üîÑ Refresh Analysis
        </button>
      </div>

      <div className="vulnerabilities-list">
        {sortedVulns.length === 0 ? (
          <div className="no-vulnerabilities">
            <div className="no-vulns-icon">üéØ</div>
            <h4>No vulnerabilities found</h4>
            <p>Great news! No vulnerabilities match your current filter criteria.</p>
          </div>
        ) : (
          sortedVulns.map((vuln, index) => (
            <div key={vuln.id || index} className="vulnerability-card">
              <div className="vuln-header" onClick={() => toggleDetails(vuln.id)}>
                <div className="vuln-title">
                  <span className="priority-icon">
                    {getPriorityIcon(vuln.priority_level)}
                  </span>
                  <div className="vuln-info">
                    <h4 className="vuln-name">{vuln.name}</h4>
                    <span className="vuln-type">{vuln.type}</span>
                  </div>
                </div>

                <div className="vuln-scores">
                  <div 
                    className="priority-badge"
                    style={{ backgroundColor: getPriorityColor(vuln.priority_level) }}
                  >
                    {vuln.priority_level}
                  </div>
                  <div className="priority-score">
                    <span className="score-label">AI Score</span>
                    <span 
                      className="score-value"
                      style={{ color: getScoreColor(vuln.priority_score) }}
                    >
                      {formatScore(vuln.priority_score)}%
                    </span>
                  </div>
                </div>

                <div className="expand-icon">
                  {showDetails[vuln.id] ? '‚ñº' : '‚ñ∂'}
                </div>
              </div>

              {showDetails[vuln.id] && (
                <div className="vuln-details">
                  <div className="details-grid">
                    <div className="detail-section">
                      <h5>üéØ Exploitability</h5>
                      <div className="score-bar">
                        <div 
                          className="score-fill"
                          style={{ 
                            width: `${vuln.exploitability * 100}%`,
                            backgroundColor: getScoreColor(vuln.exploitability)
                          }}
                        />
                        <span className="score-text">
                          {formatScore(vuln.exploitability)}%
                        </span>
                      </div>
                    </div>

                    <div className="detail-section">
                      <h5>üíº Business Impact</h5>
                      <div className="score-bar">
                        <div 
                          className="score-fill"
                          style={{ 
                            width: `${vuln.business_impact * 100}%`,
                            backgroundColor: getScoreColor(vuln.business_impact)
                          }}
                        />
                        <span className="score-text">
                          {formatScore(vuln.business_impact)}%
                        </span>
                      </div>
                    </div>

                    <div className="detail-section">
                      <h5>üîß Technical Severity</h5>
                      <div className="score-bar">
                        <div 
                          className="score-fill"
                          style={{ 
                            width: `${vuln.technical_severity * 100}%`,
                            backgroundColor: getScoreColor(vuln.technical_severity)
                          }}
                        />
                        <span className="score-text">
                          {formatScore(vuln.technical_severity)}%
                        </span>
                      </div>
                    </div>
                  </div>

                  <div className="vulnerability-description">
                    <h5>üìã Description</h5>
                    <p>{vuln.description || 'No description available'}</p>
                  </div>

                  <div className="ai-recommendation">
                    <h5>ü§ñ AI Recommendation</h5>
                    <div className="recommendation-content">
                      {vuln.priority_level === 'Critical' && (
                        <p className="critical-rec">
                          <strong>Immediate action required!</strong> This vulnerability poses a critical risk 
                          and should be addressed as the highest priority.
                        </p>
                      )}
                      {vuln.priority_level === 'High' && (
                        <p className="high-rec">
                          <strong>High priority remediation needed.</strong> This vulnerability should be 
                          addressed within the next sprint or release cycle.
                        </p>
                      )}
                      {vuln.priority_level === 'Medium' && (
                        <p className="medium-rec">
                          <strong>Moderate priority.</strong> Plan remediation within the next few weeks 
                          during regular maintenance windows.
                        </p>
                      )}
                      {vuln.priority_level === 'Low' && (
                        <p className="low-rec">
                          <strong>Low priority.</strong> Address during the next major release or 
                          when convenient for the development team.
                        </p>
                      )}
                    </div>
                  </div>
                </div>
              )}
            </div>
          ))
        )}
      </div>

      <div className="ai-disclaimer">
        <div className="disclaimer-icon">üí°</div>
        <div className="disclaimer-content">
          <h5>About AI Prioritization</h5>
          <p>
            Our AI analyzes multiple factors including exploitability, business impact, 
            and technical severity to provide intelligent vulnerability prioritization. 
            This helps security teams focus on the most critical issues first.
          </p>
        </div>
      </div>
    </div>
  );
};

export default AiVulnerabilityPrioritizer; 